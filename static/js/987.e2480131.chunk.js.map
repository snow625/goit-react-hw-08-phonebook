{"version":3,"file":"static/js/987.e2480131.chunk.js","mappings":"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","sources":["modules/LoginForm/initialState.js","modules/LoginForm/fields.js","webpack://goit-react-hw-08-phonebook/./src/modules/LoginForm/loginForm.module.css?1f30","modules/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/components/Button/button.module.css?dd0a","shared/components/Button/Button.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/components/TextField/textField.module.css?9fa7","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const initialState = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n","export const fields = {\r\n \r\n  email: {\r\n    label: \"Email\",\r\n    name: \"email\",\r\n    type: \"email\",\r\n    placeholder: \"Input email\",\r\n    required: true,\r\n  },\r\n  password: {\r\n    label: \"Password\",\r\n    name: \"password\",\r\n    type: \"password\",\r\n    placeholder: \"Input password\",\r\n    required: true,\r\n  },\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"loginForm_form__aI6EM\"};","import useForm from \"../../shared/hooks/useForm\";\r\n\r\nimport { initialState } from \"./initialState\";\r\nimport { fields } from \"./fields\";\r\n\r\nimport TextField from \"../../shared/components/TextField\";\r\nimport Button from \"../../shared/components/Button\";\r\nimport s from \"./loginForm.module.css\";\r\n\r\nconst LoginForm = ({ onSubmit }) => {\r\n  const { state, handleChange, handleSubmit } = useForm({\r\n    onSubmit,\r\n    initialState,\r\n  });\r\n  const { email, password } = state;\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <TextField value={email} onChange={handleChange} {...fields.email} />\r\n      <TextField\r\n        value={password}\r\n        onChange={handleChange}\r\n        {...fields.password}\r\n      />\r\n      <Button text=\"Login\" />\r\n    </form>\r\n  );\r\n};\r\nexport default LoginForm;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { loginOldUser } from \"../../redux/auth/auth-operation\";\r\n\r\nimport useIsLogin from \"../../shared/hooks/useisLogin\";\r\n\r\nimport LoginForm from \"../../modules/LoginForm\";\r\nconst LoginPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLogin = useIsLogin();\r\n  if (isLogin) {\r\n    return <Navigate to=\"/contacts\" />;\r\n  }\r\n\r\n  const handleSubmit = (data) => {\r\n    dispatch(loginOldUser(data));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Login:</h2>\r\n      <LoginForm onSubmit={handleSubmit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__-rT6G\"};","import PropTypes from \"prop-types\";\r\nimport s from \"./button.module.css\";\r\n\r\nconst Button = (props) => {\r\n  const { type, text, onClick } = props;\r\n  return (\r\n    <button className={s.btn} onClick={onClick} type={type}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\nButton.defaultProps = {\r\n  type: \"submit\",\r\n  onClick: () => {},\r\n};\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"textField_wrapper__J1qDe\",\"label\":\"textField_label__wJQAU\",\"input\":\"textField_input__f1HSj\"};","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./textField.module.css\";\r\n\r\nconst TextField = (props) => {\r\n  const {\r\n    label,\r\n    name,\r\n    value,\r\n    onChange,\r\n    placeholder,\r\n    required,\r\n    type,\r\n    pattern,\r\n    title,\r\n  } = props;\r\n  const id = useMemo(() => nanoid(), []);\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <label htmlFor={id} className={s.label}>\r\n        {label}\r\n      </label>\r\n      <input\r\n        onChange={onChange}\r\n        id={id}\r\n        className={s.input}\r\n        type={type}\r\n        name={name}\r\n        value={value}\r\n        placeholder={placeholder}\r\n        required={required}\r\n        pattern={pattern}\r\n        title={title}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nTextField.defaultProps = {\r\n  type: \"text\",\r\n  required: false,\r\n  onChange: () => {},\r\n};\r\n\r\nTextField.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string,\r\n  required: PropTypes.bool.isRequired,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.bool,\r\n  ]),\r\n};\r\n\r\nexport default TextField;\r\n","import { useState } from \"react\";\r\n\r\nconst useForm = ({ onSubmit, initialState, isReset = true }) => {\r\n  const [state, setState] = useState({ ...initialState });\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value, type, checked } = target;\r\n    const newValue = type === \"checkbox\" ? checked : value;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [name]: newValue,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ ...state });\r\n    if (isReset) {\r\n      setState({ ...initialState });\r\n    }\r\n  };\r\n\r\n  return { state, setState, handleChange, handleSubmit };\r\n};\r\n\r\nexport default useForm;\r\n"],"names":["initialState","email","password","fields","label","name","type","placeholder","required","onSubmit","useForm","state","handleChange","handleSubmit","className","s","TextField","value","onChange","Button","text","dispatch","useDispatch","useIsLogin","to","data","loginOldUser","props","onClick","defaultProps","pattern","title","id","useMemo","nanoid","htmlFor","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}